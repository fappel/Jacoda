{"version":3,"file":"get_db_credentials.js","sourceRoot":"","sources":["../../scripts/get_db_credentials.ts"],"names":[],"mappings":";;AAEA,uBAAyB;AACzB,IAAM,OAAO,GAAmB,OAAO,CAAC,SAAS,CAAC,CAAC;AAEnD,IAAM,MAAM,GAAG,IAAI,OAAO,CAAC,MAAM,CAAC;IAChC,GAAG,EAAE,iBAAiB;IACtB,MAAM,EAAE,iBAAiB;CAC1B,CAAC,CAAC;AAEH,IAAM,IAAI,GAAG,wBAAwB,CAAC;AACtC,IAAM,QAAQ,GAAG,iBAAiB,CAAC;AACnC,IAAM,SAAS,GAAG,mBAAmB,CAAC;AAEtC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IACzB,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;AACjB,CAAC;AAED,IAAM,IAAI,GAAG,EAAE,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;AACvC,MAAM,CAAC,UAAU,CAAC,IAAI,OAAO,CAAC,UAAU,CAAC,UAAU,CAAO,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;AAE1E,qDAAqD;AACrD,IAAI,KAAK,GAAQ,IAAI,CAAA;AACrB,EAAE,CAAC,CAAC,EAAE,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;IAC7B,IAAM,SAAS,GAAG,EAAE,CAAC,YAAY,CAAC,SAAS,EAAE,MAAM,CAAC,CAAA;IACpD,IAAI,CAAC;QACH,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAA;IAC/B,CAAC;IAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACX,cAAc;IAChB,CAAC;AACH,CAAC;AAED,wCAAwC;AACxC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;IACV,MAAM,CAAC,cAAc,CAAC,KAAK,CAAC,CAAA;AAC9B,CAAC;AAED;IACE,OAAO,CAAC,KAAK,CAAC,wBAAwB,CAAC,CAAC;IACxC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AAClB,CAAC;AAED,gDAAgD;AAChD,wEAAwE;AACxE,0EAA0E;AAC1E,MAAM,CAAC,YAAY,CAAC,UAAC,KAA2C,EAAE,aAA6B;IAC7F,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;QACV,IAAI,EAAE,CAAC;IACT,CAAC;IAAC,IAAI,CAAC,CAAC;QACN,EAAE,CAAC,CAAC,MAAM,CAAC,eAAe,EAAE,CAAC,CAAC,CAAC;YAC7B,sCAAsC;YACtC,EAAE,CAAC,aAAa,CAAC,SAAS,EAAE,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;YACzE,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;YACpB,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAClB,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,IAAI,EAAE,CAAC;QACT,CAAC;IACH,CAAC;AACH,CAAC,CAAC,CAAC","sourcesContent":["#! /usr/bin/env node\n\nimport * as fs from 'fs';\nconst dropbox: typeof Dropbox = require('dropbox');\n\nconst client = new dropbox.Client({\n  key: 'c6oex2qavccb2l3',\n  secret: 'cb0sxc9e09itvrn'\n});\n\nconst root = 'test/fixtures/dropbox/';\nconst certPath = \"#{root}cert.pem\";\nconst tokenPath = \"#{root}token.json\";\n\nif (!fs.existsSync(root)) {\n  fs.mkdir(root);\n}\n\nconst cert = fs.readFileSync(certPath);\nclient.authDriver(new dropbox.AuthDriver.NodeServer(<any> { tls: cert }));\n\n// Check if there are some credentials already stored\nlet token: any = null\nif (fs.existsSync(tokenPath)) {\n  const tokenData = fs.readFileSync(tokenPath, 'utf8')\n  try {\n    token = JSON.parse(tokenData)\n  } catch (e) {\n    // Do nothing.\n  }\n}\n\n// Use them to authenticate if there are\nif (token) {\n  client.setCredentials(token)\n}\n\nfunction fail() {\n  console.error('Failed to authenticate');\n  process.exit(1);\n}\n\n// Authenticate the client using the credentials\n// If credentials do not exist OR if existing credentials are not valid,\n// this method will pop up a browser window with the Dropbox login prompt.\nclient.authenticate((error: Dropbox.AuthError | Dropbox.ApiError, authed_client: Dropbox.Client) => {\n  if (error) {\n    fail();\n  } else {\n    if (client.isAuthenticated()) {\n      // Save the credentials for future use\n      fs.writeFileSync(tokenPath, JSON.stringify(authed_client.credentials()));\n      console.log('Done');\n      process.exit(0);\n    } else {\n      fail();\n    }\n  }\n});\n"]}