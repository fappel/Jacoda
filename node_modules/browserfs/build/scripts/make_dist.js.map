{"version":3,"file":"make_dist.js","sourceRoot":"","sources":["../../scripts/make_dist.ts"],"names":[],"mappings":";;AAIA,uBAAyB;AACzB,2BAA6B;AAC7B,+BAAiC;AAEjC,IAAM,WAAW,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;AAC1C,IAAM,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;AACxC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;IAChC,OAAO,CAAC,KAAK,CAAC,+EAA+E,CAAC,CAAC;IAC/F,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AAClB,CAAC;AAED,oBAAoB,IAAY;IAC9B,IAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;IACzC,IAAI,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IAChC,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE,CAAC;QAC9B,EAAE,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;QACrB,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;IAChC,CAAC;IACD,EAAE,CAAC,aAAa,CAAC,IAAI,EAAE,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;AACxE,CAAC;AAED,MAAM,CAAC,UAAU,EAAE,UAAC,GAAG;IACrB,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QACR,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QACnB,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAClB,CAAC;IAED,EAAE,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;IAEzB,uBAAuB;IACvB,EAAE,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,gBAAgB,CAAC,EAC1D,iEAEC,CAAC,CAAC;IAED,0BAA0B;IAC1B,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,kBAAkB,CAAC,EAAE,WAAW,EAAE,eAAe,CAAC,CAAC,OAAO,CAAC,UAAC,IAAI;QACpF,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC,OAAO,CAAC,UAAC,GAAG;YAC7B,UAAU,CAAC,KAAG,IAAI,GAAG,GAAK,CAAC,CAAC;QAC9B,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ;IACR,IAAM,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC;IAClD,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;QAC/B,EAAE,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;IAC3B,CAAC;IACD,CAAC,IAAI,EAAE,MAAM,EAAE,SAAS,EAAE,QAAQ,CAAC,CAAC,OAAO,CAAC,UAAC,GAAG;QAC9C,EAAE,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,EAAK,GAAG,QAAK,CAAC,EACvD,4CAA0C,GAAG,UAC5C,CAAC,CAAC;IACD,CAAC,CAAC,CAAC;IACH,EAAE,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,iBAAiB,CAAC,EAC3D,2DACC,CAAC,CAAC;AACH,CAAC,CAAC,CAAC","sourcesContent":["#!/usr/bin/env node\n/**\n * Assembles the 'dist' folder for BrowserFS.\n */\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport * as rimraf from 'rimraf';\n\nconst buildFolder = path.resolve('build');\nconst distFolder = path.resolve('dist');\nif (!fs.existsSync(buildFolder)) {\n  console.error(\"Cannot find build folder! Make sure you run this script from the root folder.\");\n  process.exit(1);\n}\n\nfunction copyToDist(file: string) {\n  const dest = path.join(distFolder, file);\n  let parent = path.dirname(dest);\n  while (!fs.existsSync(parent)) {\n    fs.mkdirSync(parent);\n    parent = path.dirname(parent);\n  }\n  fs.writeFileSync(dest, fs.readFileSync(path.join(buildFolder, file)));\n}\n\nrimraf(distFolder, (err) => {\n  if (err) {\n    console.error(err);\n    process.exit(1);\n  }\n\n  fs.mkdirSync(distFolder);\n\n  // TypeScript interface\n  fs.writeFileSync(path.join(distFolder, 'browserfs.d.ts'),\n`export * from './node/index';\nexport as namespace BrowserFS;\n`);\n\n  // Scripts & library files\n  [path.join('scripts', 'make_xhrfs_index'), 'browserfs', 'browserfs.min'].forEach((file) => {\n    ['.js', '.js.map'].forEach((ext) => {\n      copyToDist(`${file}${ext}`);\n    });\n  });\n\n  // Shims\n  const shimFolder = path.join(distFolder, 'shims');\n  if (!fs.existsSync(shimFolder)) {\n    fs.mkdirSync(shimFolder);\n  }\n  ['fs', 'path', 'process', 'buffer'].forEach((mod) => {\n    fs.writeFileSync(path.join(shimFolder, `${mod}.js`),\n`module.exports = BrowserFS.BFSRequire('${mod}');\n`);\n  });\n  fs.writeFileSync(path.join(shimFolder, 'bufferGlobal.js'),\n`module.exports = BrowserFS.BFSRequire('buffer').Buffer;\n`);\n});\n\n"]}