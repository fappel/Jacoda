{"version":3,"file":"make_fixture_loader.js","sourceRoot":"","sources":["../../scripts/make_fixture_loader.ts"],"names":[],"mappings":"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","sourcesContent":["#!/usr/bin/env node\n/**\n * make_fixture_loader\n * Generates a script that loads the test fixtures into the in-browser filesystem\n * USING the in-browser filesystem.\n */\nimport * as path from 'path';\nimport * as fs from 'fs';\n\nconst fixturesPath = 'test/fixtures/files';\nconst files: string[] = []\nconst dirs = ['tmp']\nconst DEBUG = false\nlet uid = 0\n\n// Used to print debug messages.\nfunction debugPrint(...args: string[]) {\n  if (DEBUG) console.log.apply(console, args)\n}\n\n// Sanity check\nif (!fs.existsSync(path.resolve('.', 'src', 'core', 'browserfs.ts'))) {\n  throw new Error('FixtureLoaderMaker must be run from the BrowserFS root!');\n}\n\ndebugPrint('Opening load_fixtures.ts...');\nconst outfile = fs.openSync(path.resolve('.', 'test', 'fixtures', 'load_fixtures.ts'), 'w+');\n\n// path0, data0\n// mkdir occurs one by one\n\n// Checks if the directory is in the listing of unique directories.\n// If not, it recursively checks its parent before adding itself to the\n// list. This maintains the invariant that no child directory occurs in the list\n// before its parent directory.\nfunction tryAddToDirs(dir: string) {\n  if (dir !== '.' && dirs.indexOf(dir) < 0) {\n    tryAddToDirs(path.dirname(dir));\n    debugPrint(`Adding ${dir} to list of directories to create...`);\n    dirs.push(dir)\n  }\n}\n\n// Recursively sort all files into directories / files\nconst processDirs = [fixturesPath]\nwhile (processDirs.length > 0) {\n  const workingDir = processDirs.pop()!;\n  // Check if we need to make this directory, or any of its parents.\n  tryAddToDirs(workingDir);\n  const workingList = fs.readdirSync(workingDir);\n  workingList.forEach((item) => {\n    const itemPath = `${workingDir}/${item}`;\n    const itemStat = fs.statSync(itemPath);\n    if (itemStat.isFile()) {\n      debugPrint(`Adding ${itemPath} to list of files to create...`);\n      files.push(itemPath.replace(/\\\\/g, '/'));\n    } else {\n      processDirs.push(itemPath);\n    }\n  });\n}\n\n// Generate the file!\n\n// Header\nfs.writeSync(outfile, `\n  // Generated by scripts/make_fixture_loader.ts\n  // Used by unit testing only. Preloads needed testing files.\n  import * as BrowserFS from '../../src/index';\n  const fs = BrowserFS.BFSRequire('fs');\n  export default function (): void {\n    let nextDir: number;\n    let dirs = ${JSON.stringify(dirs)};\n    let mcb = function(err?: NodeJS.ErrnoException): void {\n      if (err && err.code !== 'EEXIST') throw err;\n      nextDir++;\n      if (nextDir === dirs.length) {\n        __fixturesAddFiles();\n      } else {\n        fs.mkdir(dirs[nextDir],mcb);\n      }\n    };\n    let fcb = function(p: string, writtenData: string) {\n      return function(err?: NodeJS.ErrnoException) {\n        if (err) throw err;\n        fs.readFile(p, {encoding:\"base64\"}, function(err: NodeJS.ErrnoException, readData: string) {\n          if (err) throw err;\n          if (writtenData != readData) throw new Error('Read data for '+p+' does not match written data:\\\\n'+readData+'\\\\n!=\\\\n'+writtenData);\n        });\n      };\n    };\n\n    let __fixturesAddFiles = function() {\n\n  `);\nfiles.forEach((file) => {\n  const id = uid++;\n  const data = fs.readFileSync(file);\n  const datab64 = data.toString('base64');\n  fs.writeSync(outfile, `\n      let p${id} = \"${file}\";\n      let d${id} = \"${datab64}\";\n      fs.writeFile(p${id}, d${id}, {encoding: \"base64\"}, fcb(p${id}, d${id}));\n  `);\n});\nfs.writeSync(outfile, `\n  };\n\n  // Begin loading fixtures.\n  if (fs.getRootFS().isReadOnly()) { return; }\n  nextDir = -1;\n  // Ensure that root directory works.\n  fs.exists('/', function(doesExist) {\n    if (!doesExist) throw new Error(\"Invalid filesystem: Root does not exist.\");\n    mcb();\n  });\n};\n`);\n\nfs.closeSync(outfile);\n"]}