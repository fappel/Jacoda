#!/usr/bin/env node
exports.__esModule = true;
var path = require("path");
var fs = require("fs");
var fixturesPath = 'test/fixtures/files';
var files = [];
var dirs = ['tmp'];
var DEBUG = false;
var uid = 0;
// Used to print debug messages.
function debugPrint() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    if (DEBUG)
        console.log.apply(console, args);
}
// Sanity check
if (!fs.existsSync(path.resolve('.', 'src', 'core', 'browserfs.ts'))) {
    throw new Error('FixtureLoaderMaker must be run from the BrowserFS root!');
}
debugPrint('Opening load_fixtures.ts...');
var outfile = fs.openSync(path.resolve('.', 'test', 'fixtures', 'load_fixtures.ts'), 'w+');
// path0, data0
// mkdir occurs one by one
// Checks if the directory is in the listing of unique directories.
// If not, it recursively checks its parent before adding itself to the
// list. This maintains the invariant that no child directory occurs in the list
// before its parent directory.
function tryAddToDirs(dir) {
    if (dir !== '.' && dirs.indexOf(dir) < 0) {
        tryAddToDirs(path.dirname(dir));
        debugPrint("Adding " + dir + " to list of directories to create...");
        dirs.push(dir);
    }
}
// Recursively sort all files into directories / files
var processDirs = [fixturesPath];
var _loop_1 = function () {
    var workingDir = processDirs.pop();
    // Check if we need to make this directory, or any of its parents.
    tryAddToDirs(workingDir);
    var workingList = fs.readdirSync(workingDir);
    workingList.forEach(function (item) {
        var itemPath = workingDir + "/" + item;
        var itemStat = fs.statSync(itemPath);
        if (itemStat.isFile()) {
            debugPrint("Adding " + itemPath + " to list of files to create...");
            files.push(itemPath.replace(/\\/g, '/'));
        }
        else {
            processDirs.push(itemPath);
        }
    });
};
while (processDirs.length > 0) {
    _loop_1();
}
// Generate the file!
// Header
fs.writeSync(outfile, "\n  // Generated by scripts/make_fixture_loader.ts\n  // Used by unit testing only. Preloads needed testing files.\n  import * as BrowserFS from '../../src/index';\n  const fs = BrowserFS.BFSRequire('fs');\n  export default function (): void {\n    let nextDir: number;\n    let dirs = " + JSON.stringify(dirs) + ";\n    let mcb = function(err?: NodeJS.ErrnoException): void {\n      if (err && err.code !== 'EEXIST') throw err;\n      nextDir++;\n      if (nextDir === dirs.length) {\n        __fixturesAddFiles();\n      } else {\n        fs.mkdir(dirs[nextDir],mcb);\n      }\n    };\n    let fcb = function(p: string, writtenData: string) {\n      return function(err?: NodeJS.ErrnoException) {\n        if (err) throw err;\n        fs.readFile(p, {encoding:\"base64\"}, function(err: NodeJS.ErrnoException, readData: string) {\n          if (err) throw err;\n          if (writtenData != readData) throw new Error('Read data for '+p+' does not match written data:\\n'+readData+'\\n!=\\n'+writtenData);\n        });\n      };\n    };\n\n    let __fixturesAddFiles = function() {\n\n  ");
files.forEach(function (file) {
    var id = uid++;
    var data = fs.readFileSync(file);
    var datab64 = data.toString('base64');
    fs.writeSync(outfile, "\n      let p" + id + " = \"" + file + "\";\n      let d" + id + " = \"" + datab64 + "\";\n      fs.writeFile(p" + id + ", d" + id + ", {encoding: \"base64\"}, fcb(p" + id + ", d" + id + "));\n  ");
});
fs.writeSync(outfile, "\n  };\n\n  // Begin loading fixtures.\n  if (fs.getRootFS().isReadOnly()) { return; }\n  nextDir = -1;\n  // Ensure that root directory works.\n  fs.exists('/', function(doesExist) {\n    if (!doesExist) throw new Error(\"Invalid filesystem: Root does not exist.\");\n    mcb();\n  });\n};\n");
fs.closeSync(outfile);
//# sourceMappingURL=make_fixture_loader.js.map