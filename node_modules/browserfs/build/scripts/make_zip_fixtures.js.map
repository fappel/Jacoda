{"version":3,"file":"make_zip_fixtures.js","sourceRoot":"","sources":["../../scripts/make_zip_fixtures.ts"],"names":[],"mappings":";;AAEA,uBAAyB;AACzB,2BAA6B;AAC7B,mCAAqC;AAErC,IAAM,UAAU,GAAG,GAAG,CAAC;AACvB,IAAM,SAAS,GAAM,UAAU,yBAAsB,CAAC;AACtD,IAAM,YAAY,GAAM,UAAU,yBAAsB,CAAC;AAEzD,gFAAgF;AAChF,mBAAmB,KAAa;IAC9B,IAAM,MAAM,GAAG,EAAE,CAAC,iBAAiB,CAAI,YAAY,yBAAoB,KAAK,SAAM,CAAC,CAAC;IACpF,IAAM,OAAO,GAAG,EAAE,IAAI,EAAE,EAAE,KAAK,EAAE,KAAK,EAAE,EAAE,CAAC;IAC3C,IAAM,OAAO,GAAG,QAAQ,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;IACzC,OAAO,CAAC,EAAE,CAAC,OAAO,EAAE,UAAC,GAAQ;QAC3B,MAAM,GAAG,CAAC;IACZ,CAAC,CAAC,CAAC;IACH,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACrB,SAAS,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;IAC9B,OAAO,CAAC,QAAQ,EAAE,CAAC;AACrB,CAAC;AAED,2DAA2D;AAC3D,mBAAmB,OAAY,EAAE,MAAc;IAC7C,EAAE,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,UAAC,IAAI;QAClC,IAAM,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;QACzC,EAAE,CAAC,CAAC,EAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;YACxC,SAAS,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;QAC/B,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,OAAO,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;QAC7B,CAAC;IACH,CAAC,CAAC,CAAC;AACL,CAAC;AAED,sCAAsC;AACtC,iBAAiB,OAAY,EAAE,QAAgB;IAC7C,IAAM,gBAAgB,GAAG,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;IAC7D,OAAO,CAAC,MAAM,CAAC,EAAE,CAAC,gBAAgB,CAAC,QAAQ,CAAC,EAAE,EAAC,IAAI,EAAE,gBAAgB,EAAC,CAAC,CAAC;AAC1E,CAAC;AAED,8BAA8B;AAC9B,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;IACjC,EAAE,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC;AAC7B,CAAC;AAED,QAAQ;AACR,SAAS,CAAC,CAAC,CAAC,CAAC;AACb,iCAAiC;AACjC,SAAS,CAAC,CAAC,CAAC,CAAC;AACb,sBAAsB;AACtB,SAAS,CAAC,CAAC,CAAC,CAAC","sourcesContent":["#! /usr/bin/env node\n// Generates test fixtures for Zip FS.\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport * as archiver from 'archiver';\n\nconst baseFolder = `.`;\nconst srcFolder = `${baseFolder}/test/fixtures/files`;\nconst outputFolder = `${baseFolder}/test/fixtures/zipfs`;\n\n// Create a zip file of the fixture data using the given zlib compression level.\nfunction createZip(level: number): void {\n  const output = fs.createWriteStream(`${outputFolder}/zipfs_fixtures_l${level}.zip`);\n  const options = { zlib: { level: level } };\n  const archive = archiver('zip', options);\n  archive.on('error', (err: any) => {\n    throw err;\n  });\n  archive.pipe(output);\n  addFolder(archive, srcFolder);\n  archive.finalize();\n}\n\n// Recursively add folders and their files to the zip file.\nfunction addFolder(archive: any, folder: string) {\n  fs.readdirSync(folder).forEach((file) => {\n    const fullpath = path.join(folder, file);\n    if (fs.statSync(fullpath).isDirectory()) {\n      addFolder(archive, fullpath);\n    } else {\n      addFile(archive, fullpath);\n    }\n  });\n}\n\n// Add the given file to the zip file.\nfunction addFile(archive: any, fileName: string) {\n  const fileNameRelative = path.relative(baseFolder, fileName);\n  archive.append(fs.createReadStream(fileName), {name: fileNameRelative});\n}\n\n// Ensure output folder exists\nif (!fs.existsSync(outputFolder)) {\n  fs.mkdirSync(outputFolder);\n}\n\n// Store\ncreateZip(0);\n// Middle-of-the-road compression\ncreateZip(4);\n// Maximum compression\ncreateZip(9);\n"]}