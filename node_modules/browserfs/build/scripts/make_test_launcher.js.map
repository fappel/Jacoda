{"version":3,"file":"make_test_launcher.js","sourceRoot":"","sources":["../../scripts/make_test_launcher.ts"],"names":[],"mappings":"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","sourcesContent":["#!/usr/bin/env node\n\n// Generates `run.ts` for unit tests.\n\nimport * as fs from 'fs';\nimport * as path from 'path';\n\nfunction generateRunFile() {\n  let tests = '', importsStringified: string, testImports: string[] = [];\n  function processDir(dir: string) {\n    fs.readdirSync(dir).forEach(function(file) {\n      let filePath = path.resolve(dir, file),\n        relPath = path.relative(path.resolve('test/harness'), filePath);\n      if (fs.statSync(filePath).isFile()) {\n        let name = path.basename(relPath).replace(/-/g, '_');\n        name = name.slice(0, name.length - 3);\n        switch (path.extname(file)) {\n        case '.ts':\n          let modPath = relPath.slice(0, relPath.length - 3).replace(/\\\\/g, '/');\n          testImports.push(`import ${name} from '${modPath}';`);\n          tests += `'${file}': ${name},`;\n          break;\n        case '.js':\n          let jsModPath = relPath.slice(0, relPath.length - 3).replace(/\\\\/g, '/');\n          testImports.push(`const ${name}Emscripten = require('${jsModPath}');`);\n          tests += `'${file}': ${name}Emscripten,`;\n          break;\n        default:\n          break;\n        }\n      } else {\n        tests += '\\'' + file + '\\':{';\n        processDir(filePath);\n        tests += '},';\n      }\n    });\n    // Remove trailing ','.\n    tests = tests.slice(0, tests.length - 1);\n  }\n  processDir('test/tests');\n  const factoryList: string[] = [];\n  importsStringified = fs.readdirSync('test/harness/factories')\n    .filter(function(file) {\n      return file.slice(file.length-11) === '_factory.ts';\n    })\n    .map(function(file) {\n      var name = file.slice(0, file.length - 11);\n      factoryList.push(name);\n      return `import ${name} from './factories/${file.slice(0, file.length - 3)}';`;\n    }).concat(testImports).join('\\n');\n\n  fs.writeFileSync('test/harness/run.ts',\n    fs.readFileSync('test/harness/run.tstemplate')\n      .toString()\n      .replace(/\\/\\*IMPORTS\\*\\//g, importsStringified)\n      .replace(/\\/\\*FACTORIES\\*\\//g, factoryList.join(', '))\n      .replace(/\\/\\*TESTS\\*\\//g, tests), 'utf8');\n}\n\ngenerateRunFile();\n"]}