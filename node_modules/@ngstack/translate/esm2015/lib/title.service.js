/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { Title } from '@angular/platform-browser';
import { TranslateService } from './translate.service';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "@angular/platform-browser";
import * as i2 from "./translate.service";
export class TitleService {
    /**
     * @param {?} title
     * @param {?} translate
     */
    constructor(title, translate) {
        this.title = title;
        this.translate = translate;
        this._titleKey = '';
        this.changed = new Subject();
        translate.activeLangChanged.subscribe(() => this.onLanguageChanged());
    }
    /**
     * @return {?}
     */
    getTitle() {
        return this._titleKey;
    }
    /**
     * @param {?} key
     * @return {?}
     */
    setTitle(key) {
        /** @type {?} */
        const previousValue = this._titleKey;
        /** @type {?} */
        const newValue = key || '';
        /** @type {?} */
        const changed = newValue !== previousValue;
        if (changed) {
            this._titleKey = newValue;
            /** @type {?} */
            const translated = this.translate.get(newValue);
            this.title.setTitle(translated);
            this.changed.next({
                previousValue: previousValue,
                currentValue: newValue
            });
        }
    }
    /**
     * @return {?}
     */
    onLanguageChanged() {
        if (this._titleKey) {
            /** @type {?} */
            const translated = this.translate.get(this._titleKey);
            this.title.setTitle(translated);
        }
    }
}
TitleService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
TitleService.ctorParameters = () => [
    { type: Title },
    { type: TranslateService }
];
/** @nocollapse */ TitleService.ngInjectableDef = i0.defineInjectable({ factory: function TitleService_Factory() { return new TitleService(i0.inject(i1.Title), i0.inject(i2.TranslateService)); }, token: TitleService, providedIn: "root" });
if (false) {
    /** @type {?} */
    TitleService.prototype._titleKey;
    /** @type {?} */
    TitleService.prototype.changed;
    /** @type {?} */
    TitleService.prototype.title;
    /** @type {?} */
    TitleService.prototype.translate;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGl0bGUuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZ3N0YWNrL3RyYW5zbGF0ZS8iLCJzb3VyY2VzIjpbImxpYi90aXRsZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUNsRCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN2RCxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDOzs7O0FBSy9CLE1BQU0sT0FBTyxZQUFZOzs7OztJQVF2QixZQUFvQixLQUFZLEVBQVUsU0FBMkI7UUFBakQsVUFBSyxHQUFMLEtBQUssQ0FBTztRQUFVLGNBQVMsR0FBVCxTQUFTLENBQWtCO1FBUDdELGNBQVMsR0FBRyxFQUFFLENBQUM7UUFFdkIsWUFBTyxHQUFHLElBQUksT0FBTyxFQUdqQixDQUFDO1FBR0gsU0FBUyxDQUFDLGlCQUFpQixDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxDQUFDO0lBQ3hFLENBQUM7Ozs7SUFFRCxRQUFRO1FBQ04sT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDO0lBQ3hCLENBQUM7Ozs7O0lBRUQsUUFBUSxDQUFDLEdBQVc7O2NBQ1osYUFBYSxHQUFHLElBQUksQ0FBQyxTQUFTOztjQUM5QixRQUFRLEdBQUcsR0FBRyxJQUFJLEVBQUU7O2NBQ3BCLE9BQU8sR0FBRyxRQUFRLEtBQUssYUFBYTtRQUUxQyxJQUFJLE9BQU8sRUFBRTtZQUNYLElBQUksQ0FBQyxTQUFTLEdBQUcsUUFBUSxDQUFDOztrQkFFcEIsVUFBVSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQztZQUMvQyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUVoQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQztnQkFDaEIsYUFBYSxFQUFFLGFBQWE7Z0JBQzVCLFlBQVksRUFBRSxRQUFRO2FBQ3ZCLENBQUMsQ0FBQztTQUNKO0lBQ0gsQ0FBQzs7OztJQUVPLGlCQUFpQjtRQUN2QixJQUFJLElBQUksQ0FBQyxTQUFTLEVBQUU7O2tCQUNaLFVBQVUsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDO1lBQ3JELElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1NBQ2pDO0lBQ0gsQ0FBQzs7O1lBMUNGLFVBQVUsU0FBQztnQkFDVixVQUFVLEVBQUUsTUFBTTthQUNuQjs7OztZQU5RLEtBQUs7WUFDTCxnQkFBZ0I7Ozs7O0lBT3ZCLGlDQUF1Qjs7SUFFdkIsK0JBR0s7O0lBRU8sNkJBQW9COztJQUFFLGlDQUFtQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFRpdGxlIH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlcic7XG5pbXBvcnQgeyBUcmFuc2xhdGVTZXJ2aWNlIH0gZnJvbSAnLi90cmFuc2xhdGUuc2VydmljZSc7XG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIFRpdGxlU2VydmljZSB7XG4gIHByaXZhdGUgX3RpdGxlS2V5ID0gJyc7XG5cbiAgY2hhbmdlZCA9IG5ldyBTdWJqZWN0PHtcbiAgICBwcmV2aW91c1ZhbHVlOiBzdHJpbmc7XG4gICAgY3VycmVudFZhbHVlOiBzdHJpbmc7XG4gIH0+KCk7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSB0aXRsZTogVGl0bGUsIHByaXZhdGUgdHJhbnNsYXRlOiBUcmFuc2xhdGVTZXJ2aWNlKSB7XG4gICAgdHJhbnNsYXRlLmFjdGl2ZUxhbmdDaGFuZ2VkLnN1YnNjcmliZSgoKSA9PiB0aGlzLm9uTGFuZ3VhZ2VDaGFuZ2VkKCkpO1xuICB9XG5cbiAgZ2V0VGl0bGUoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5fdGl0bGVLZXk7XG4gIH1cblxuICBzZXRUaXRsZShrZXk6IHN0cmluZyk6IHZvaWQge1xuICAgIGNvbnN0IHByZXZpb3VzVmFsdWUgPSB0aGlzLl90aXRsZUtleTtcbiAgICBjb25zdCBuZXdWYWx1ZSA9IGtleSB8fCAnJztcbiAgICBjb25zdCBjaGFuZ2VkID0gbmV3VmFsdWUgIT09IHByZXZpb3VzVmFsdWU7XG5cbiAgICBpZiAoY2hhbmdlZCkge1xuICAgICAgdGhpcy5fdGl0bGVLZXkgPSBuZXdWYWx1ZTtcblxuICAgICAgY29uc3QgdHJhbnNsYXRlZCA9IHRoaXMudHJhbnNsYXRlLmdldChuZXdWYWx1ZSk7XG4gICAgICB0aGlzLnRpdGxlLnNldFRpdGxlKHRyYW5zbGF0ZWQpO1xuXG4gICAgICB0aGlzLmNoYW5nZWQubmV4dCh7XG4gICAgICAgIHByZXZpb3VzVmFsdWU6IHByZXZpb3VzVmFsdWUsXG4gICAgICAgIGN1cnJlbnRWYWx1ZTogbmV3VmFsdWVcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgb25MYW5ndWFnZUNoYW5nZWQoKSB7XG4gICAgaWYgKHRoaXMuX3RpdGxlS2V5KSB7XG4gICAgICBjb25zdCB0cmFuc2xhdGVkID0gdGhpcy50cmFuc2xhdGUuZ2V0KHRoaXMuX3RpdGxlS2V5KTtcbiAgICAgIHRoaXMudGl0bGUuc2V0VGl0bGUodHJhbnNsYXRlZCk7XG4gICAgfVxuICB9XG59XG4iXX0=