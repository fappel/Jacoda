/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable, EventEmitter, Inject, InjectionToken, Optional } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
/** @type {?} */
export var TRANSLATE_SETTINGS = new InjectionToken('TRANSLATE_SETTINGS');
/**
 * @record
 */
export function TranslateParams() { }
var TranslateService = /** @class */ (function () {
    function TranslateService(http, settings) {
        this.http = http;
        this.data = {};
        this._fallbackLang = 'en';
        this._translationRoot = 'assets/i18n';
        /**
         * Raised each time active language gets changed.
         */
        this.activeLangChanged = new EventEmitter();
        /**
         * Toggles debug mode.
         *
         * When in the debug mode, the service automatically prepends active language id to very translated result.
         * That allows to verify that your components support i18n correctly and do not contain hard-coded text.
         */
        this.debugMode = false;
        /**
         * Disable caching and always download language files.
         *
         * Applies cache busting query parameters to urls, for example: '?v=1522426955882'.
         */
        this.disableCache = false;
        /**
         * List of supported languages.
         *
         * The service will attempt to load resource files only for given set of languages,
         * and will automatically use fallback language for all unspecified values.
         *
         * By default this property is empty and service is going to probe all language files.
         * Active and Fallback languages are always taken into account even if you do not specify them in the list.
         */
        this.supportedLangs = [];
        /**
         * List of extra paths to look for translation files.
         *
         * By default this property is empty.
         * The value of `translationRoot` property is always taken into account.
         */
        this.translatePaths = [];
        this.applySettings(settings);
    }
    Object.defineProperty(TranslateService.prototype, "fallbackLang", {
        /**
         * The fallback language to use when a resource string for the active language is not available.
         */
        get: /**
         * The fallback language to use when a resource string for the active language is not available.
         * @return {?}
         */
        function () {
            return this._fallbackLang;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._fallbackLang = value || 'en';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TranslateService.prototype, "activeLang", {
        /**
         * The language to use for the translations.
         */
        get: /**
         * The language to use for the translations.
         * @return {?}
         */
        function () {
            return this._activeLang;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            var _this = this;
            /** @type {?} */
            var previousValue = this._activeLang;
            /** @type {?} */
            var newValue = value || this.fallbackLang;
            /** @type {?} */
            var changed = newValue !== previousValue;
            if (changed) {
                this._activeLang = newValue;
                this.use(newValue).then(function () {
                    _this.activeLangChanged.next({
                        previousValue: previousValue,
                        currentValue: newValue
                    });
                });
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    TranslateService.prototype.getBrowserLanguage = /**
     * @return {?}
     */
    function () {
        var _a = tslib_1.__read(navigator.language
            .replace('-', '_')
            .toLowerCase()
            .split('_'), 1), lang = _a[0] /*, locale*/;
        return lang;
    };
    Object.defineProperty(TranslateService.prototype, "translationRoot", {
        /**
         * The root path to use when loading default translation files.
         * Defaults to 'assets/i18n'.
         */
        get: /**
         * The root path to use when loading default translation files.
         * Defaults to 'assets/i18n'.
         * @return {?}
         */
        function () {
            return this._translationRoot;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._translationRoot = value || 'assets/i18n';
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} settings
     * @return {?}
     */
    TranslateService.prototype.applySettings = /**
     * @param {?} settings
     * @return {?}
     */
    function (settings) {
        var _a = this, debugMode = _a.debugMode, disableCache = _a.disableCache, supportedLangs = _a.supportedLangs, translatePaths = _a.translatePaths, translationRoot = _a.translationRoot, activeLang = _a.activeLang;
        /** @type {?} */
        var defaults = tslib_1.__assign({ debugMode: debugMode,
            disableCache: disableCache,
            supportedLangs: supportedLangs,
            translatePaths: translatePaths,
            translationRoot: translationRoot,
            activeLang: activeLang }, settings);
        this.debugMode = defaults.debugMode;
        this.disableCache = defaults.disableCache;
        this.supportedLangs = defaults.supportedLangs;
        this.translatePaths = defaults.translatePaths;
        this.translationRoot = defaults.translationRoot;
        this._activeLang = defaults.activeLang || this.getBrowserLanguage();
    };
    /**
     * Get translated string
     *
     * @param key Translation key
     * @param [params] Translation parameters
     * @param [lang] Language to use for translation
     * @returns Translated string
     * @memberof TranslateService
     */
    /**
     * Get translated string
     *
     * \@memberof TranslateService
     * @param {?} key Translation key
     * @param {?=} params
     * @param {?=} lang
     * @return {?} Translated string
     */
    TranslateService.prototype.get = /**
     * Get translated string
     *
     * \@memberof TranslateService
     * @param {?} key Translation key
     * @param {?=} params
     * @param {?=} lang
     * @return {?} Translated string
     */
    function (key, params, lang) {
        if (key) {
            /** @type {?} */
            var value = this.getValue(lang || this.activeLang, key);
            if (value === key) {
                value = this.getValue(this.fallbackLang, key);
            }
            return this.format(value, params);
        }
        else {
            return null;
        }
    };
    /**
     * @return {?}
     */
    TranslateService.prototype.load = /**
     * @return {?}
     */
    function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.use(this.fallbackLang)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, this.use(this.activeLang)];
                }
            });
        });
    };
    /**
     * Load the translation file or use provided data for the given language.
     *
     * @param lang Language name
     * @param [data] Translation data to use
     * @returns Final translation data merged with existing translations
     * @memberof TranslateService
     */
    /**
     * Load the translation file or use provided data for the given language.
     *
     * \@memberof TranslateService
     * @param {?} lang Language name
     * @param {?=} data
     * @return {?} Final translation data merged with existing translations
     */
    TranslateService.prototype.use = /**
     * Load the translation file or use provided data for the given language.
     *
     * \@memberof TranslateService
     * @param {?} lang Language name
     * @param {?=} data
     * @return {?} Final translation data merged with existing translations
     */
    function (lang, data) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var e_1, _a, translation, fileName, filePaths, filePaths_1, filePaths_1_1, path, filePath, e_1_1;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (lang && data) {
                            return [2 /*return*/, this.setTranslation(lang, data)];
                        }
                        translation = this.data[lang];
                        if (this.isNotSupported(lang)) {
                            translation = this.data[this.fallbackLang];
                        }
                        if (translation && Object.keys(translation).length > 0) {
                            return [2 /*return*/, translation];
                        }
                        fileName = (lang || this.fallbackLang) + ".json";
                        filePaths = tslib_1.__spread([this.translationRoot], (this.translatePaths || []));
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 6, 7, 8]);
                        filePaths_1 = tslib_1.__values(filePaths), filePaths_1_1 = filePaths_1.next();
                        _b.label = 2;
                    case 2:
                        if (!!filePaths_1_1.done) return [3 /*break*/, 5];
                        path = filePaths_1_1.value;
                        filePath = path + "/" + fileName;
                        return [4 /*yield*/, this.loadTranslation(lang, filePath)];
                    case 3:
                        _b.sent();
                        _b.label = 4;
                    case 4:
                        filePaths_1_1 = filePaths_1.next();
                        return [3 /*break*/, 2];
                    case 5: return [3 /*break*/, 8];
                    case 6:
                        e_1_1 = _b.sent();
                        e_1 = { error: e_1_1 };
                        return [3 /*break*/, 8];
                    case 7:
                        try {
                            if (filePaths_1_1 && !filePaths_1_1.done && (_a = filePaths_1.return)) _a.call(filePaths_1);
                        }
                        finally { if (e_1) throw e_1.error; }
                        return [7 /*endfinally*/];
                    case 8: return [2 /*return*/, this.data[lang] || {}];
                }
            });
        });
    };
    /**
     * @param {?} lang
     * @param {?} path
     * @return {?}
     */
    TranslateService.prototype.loadTranslation = /**
     * @param {?} lang
     * @param {?} path
     * @return {?}
     */
    function (lang, path) {
        var _this = this;
        return new Promise(function (resolve) {
            if (_this.disableCache) {
                path += "?v=" + Date.now();
            }
            _this.http.get(path).subscribe(function (json) {
                resolve(_this.setTranslation(lang, json));
            }, function () {
                resolve(_this.data[lang] || {});
            });
        });
    };
    /**
     * @param {?} lang
     * @return {?}
     */
    TranslateService.prototype.isNotSupported = /**
     * @param {?} lang
     * @return {?}
     */
    function (lang) {
        return (lang !== this.fallbackLang &&
            lang !== this.activeLang &&
            (this.supportedLangs &&
                this.supportedLangs.length > 0 &&
                !this.supportedLangs.includes(lang)));
    };
    /**
     * @param {?} lang
     * @param {?} key
     * @return {?}
     */
    TranslateService.prototype.getValue = /**
     * @param {?} lang
     * @param {?} key
     * @return {?}
     */
    function (lang, key) {
        /** @type {?} */
        var data = this.data[lang];
        if (this.isNotSupported(lang)) {
            data = this.data[this.fallbackLang];
        }
        if (!data) {
            return key;
        }
        /** @type {?} */
        var keys = key.split('.');
        /** @type {?} */
        var propKey = '';
        do {
            propKey += keys.shift();
            /** @type {?} */
            var value = data[propKey];
            if (value !== undefined && (typeof value === 'object' || !keys.length)) {
                data = value;
                propKey = '';
            }
            else if (!keys.length) {
                data = key;
            }
            else {
                propKey += '.';
            }
        } while (keys.length);
        return data;
    };
    /**
     * @param {?} lang
     * @param {?} data
     * @return {?}
     */
    TranslateService.prototype.setTranslation = /**
     * @param {?} lang
     * @param {?} data
     * @return {?}
     */
    function (lang, data) {
        /** @type {?} */
        var finalResult = this.data[lang] || {};
        finalResult = this.merge(finalResult, data || {});
        this.data[lang] = finalResult;
        return finalResult;
    };
    /**
     * @param {...?} translations
     * @return {?}
     */
    TranslateService.prototype.merge = /**
     * @param {...?} translations
     * @return {?}
     */
    function () {
        var _this = this;
        var translations = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            translations[_i] = arguments[_i];
        }
        /** @type {?} */
        var result = {};
        translations.forEach(function (translation) {
            Object.keys(translation).forEach(function (key) {
                if (key in result && Array.isArray(result[key])) {
                    result[key] = result[key].concat(translation[key]);
                }
                else if (key in result && typeof result[key] === 'object') {
                    result[key] = _this.merge(result[key], translation[key]);
                }
                else {
                    result[key] = translation[key];
                }
            });
        });
        return result;
    };
    /**
     * @param {?} str
     * @param {?} params
     * @return {?}
     */
    TranslateService.prototype.format = /**
     * @param {?} str
     * @param {?} params
     * @return {?}
     */
    function (str, params) {
        /** @type {?} */
        var result = str;
        if (params) {
            Object.keys(params).forEach(function (key) {
                /** @type {?} */
                var value = params[key];
                /** @type {?} */
                var template = new RegExp('{' + key + '}', 'gm');
                result = result.replace(template, value);
            });
        }
        if (this.debugMode) {
            result = "[" + this.activeLang + "] " + result;
        }
        return result;
    };
    TranslateService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    TranslateService.ctorParameters = function () { return [
        { type: HttpClient },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [TRANSLATE_SETTINGS,] }] }
    ]; };
    /** @nocollapse */ TranslateService.ngInjectableDef = i0.defineInjectable({ factory: function TranslateService_Factory() { return new TranslateService(i0.inject(i1.HttpClient), i0.inject(TRANSLATE_SETTINGS, 8)); }, token: TranslateService, providedIn: "root" });
    return TranslateService;
}());
export { TranslateService };
if (false) {
    /** @type {?} */
    TranslateService.prototype.data;
    /** @type {?} */
    TranslateService.prototype._fallbackLang;
    /** @type {?} */
    TranslateService.prototype._activeLang;
    /** @type {?} */
    TranslateService.prototype._translationRoot;
    /**
     * Raised each time active language gets changed.
     * @type {?}
     */
    TranslateService.prototype.activeLangChanged;
    /**
     * Toggles debug mode.
     *
     * When in the debug mode, the service automatically prepends active language id to very translated result.
     * That allows to verify that your components support i18n correctly and do not contain hard-coded text.
     * @type {?}
     */
    TranslateService.prototype.debugMode;
    /**
     * Disable caching and always download language files.
     *
     * Applies cache busting query parameters to urls, for example: '?v=1522426955882'.
     * @type {?}
     */
    TranslateService.prototype.disableCache;
    /**
     * List of supported languages.
     *
     * The service will attempt to load resource files only for given set of languages,
     * and will automatically use fallback language for all unspecified values.
     *
     * By default this property is empty and service is going to probe all language files.
     * Active and Fallback languages are always taken into account even if you do not specify them in the list.
     * @type {?}
     */
    TranslateService.prototype.supportedLangs;
    /**
     * List of extra paths to look for translation files.
     *
     * By default this property is empty.
     * The value of `translationRoot` property is always taken into account.
     * @type {?}
     */
    TranslateService.prototype.translatePaths;
    /** @type {?} */
    TranslateService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,