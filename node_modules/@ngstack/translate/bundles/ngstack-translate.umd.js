(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common/http'), require('@angular/platform-browser'), require('rxjs'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('@ngstack/translate', ['exports', '@angular/core', '@angular/common/http', '@angular/platform-browser', 'rxjs', '@angular/common'], factory) :
    (factory((global.ngstack = global.ngstack || {}, global.ngstack.translate = {}),global.ng.core,global.ng.common.http,global.ng.platformBrowser,global.rxjs,global.ng.common));
}(this, (function (exports,i0,i1,i1$1,rxjs,common) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __awaiter(thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m)
            return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length)
                    o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var TRANSLATE_SETTINGS = new i0.InjectionToken('TRANSLATE_SETTINGS');
    var TranslateService = /** @class */ (function () {
        function TranslateService(http, settings) {
            this.http = http;
            this.data = {};
            this._fallbackLang = 'en';
            this._translationRoot = 'assets/i18n';
            /**
             * Raised each time active language gets changed.
             */
            this.activeLangChanged = new i0.EventEmitter();
            /**
             * Toggles debug mode.
             *
             * When in the debug mode, the service automatically prepends active language id to very translated result.
             * That allows to verify that your components support i18n correctly and do not contain hard-coded text.
             */
            this.debugMode = false;
            /**
             * Disable caching and always download language files.
             *
             * Applies cache busting query parameters to urls, for example: '?v=1522426955882'.
             */
            this.disableCache = false;
            /**
             * List of supported languages.
             *
             * The service will attempt to load resource files only for given set of languages,
             * and will automatically use fallback language for all unspecified values.
             *
             * By default this property is empty and service is going to probe all language files.
             * Active and Fallback languages are always taken into account even if you do not specify them in the list.
             */
            this.supportedLangs = [];
            /**
             * List of extra paths to look for translation files.
             *
             * By default this property is empty.
             * The value of `translationRoot` property is always taken into account.
             */
            this.translatePaths = [];
            this.applySettings(settings);
        }
        Object.defineProperty(TranslateService.prototype, "fallbackLang", {
            /**
             * The fallback language to use when a resource string for the active language is not available.
             */
            get: /**
             * The fallback language to use when a resource string for the active language is not available.
             * @return {?}
             */ function () {
                return this._fallbackLang;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._fallbackLang = value || 'en';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TranslateService.prototype, "activeLang", {
            /**
             * The language to use for the translations.
             */
            get: /**
             * The language to use for the translations.
             * @return {?}
             */ function () {
                return this._activeLang;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                var _this = this;
                /** @type {?} */
                var previousValue = this._activeLang;
                /** @type {?} */
                var newValue = value || this.fallbackLang;
                /** @type {?} */
                var changed = newValue !== previousValue;
                if (changed) {
                    this._activeLang = newValue;
                    this.use(newValue).then(function () {
                        _this.activeLangChanged.next({
                            previousValue: previousValue,
                            currentValue: newValue
                        });
                    });
                }
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        TranslateService.prototype.getBrowserLanguage = /**
         * @return {?}
         */
            function () {
                var _a = __read(navigator.language
                    .replace('-', '_')
                    .toLowerCase()
                    .split('_'), 1), lang = _a[0] /*, locale*/;
                return lang;
            };
        Object.defineProperty(TranslateService.prototype, "translationRoot", {
            /**
             * The root path to use when loading default translation files.
             * Defaults to 'assets/i18n'.
             */
            get: /**
             * The root path to use when loading default translation files.
             * Defaults to 'assets/i18n'.
             * @return {?}
             */ function () {
                return this._translationRoot;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._translationRoot = value || 'assets/i18n';
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} settings
         * @return {?}
         */
        TranslateService.prototype.applySettings = /**
         * @param {?} settings
         * @return {?}
         */
            function (settings) {
                var _a = this, debugMode = _a.debugMode, disableCache = _a.disableCache, supportedLangs = _a.supportedLangs, translatePaths = _a.translatePaths, translationRoot = _a.translationRoot, activeLang = _a.activeLang;
                /** @type {?} */
                var defaults = __assign({ debugMode: debugMode,
                    disableCache: disableCache,
                    supportedLangs: supportedLangs,
                    translatePaths: translatePaths,
                    translationRoot: translationRoot,
                    activeLang: activeLang }, settings);
                this.debugMode = defaults.debugMode;
                this.disableCache = defaults.disableCache;
                this.supportedLangs = defaults.supportedLangs;
                this.translatePaths = defaults.translatePaths;
                this.translationRoot = defaults.translationRoot;
                this._activeLang = defaults.activeLang || this.getBrowserLanguage();
            };
        /**
         * Get translated string
         *
         * @param key Translation key
         * @param [params] Translation parameters
         * @param [lang] Language to use for translation
         * @returns Translated string
         * @memberof TranslateService
         */
        /**
         * Get translated string
         *
         * \@memberof TranslateService
         * @param {?} key Translation key
         * @param {?=} params
         * @param {?=} lang
         * @return {?} Translated string
         */
        TranslateService.prototype.get = /**
         * Get translated string
         *
         * \@memberof TranslateService
         * @param {?} key Translation key
         * @param {?=} params
         * @param {?=} lang
         * @return {?} Translated string
         */
            function (key, params, lang) {
                if (key) {
                    /** @type {?} */
                    var value = this.getValue(lang || this.activeLang, key);
                    if (value === key) {
                        value = this.getValue(this.fallbackLang, key);
                    }
                    return this.format(value, params);
                }
                else {
                    return null;
                }
            };
        /**
         * @return {?}
         */
        TranslateService.prototype.load = /**
         * @return {?}
         */
            function () {
                return __awaiter(this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, this.use(this.fallbackLang)];
                            case 1:
                                _a.sent();
                                return [2 /*return*/, this.use(this.activeLang)];
                        }
                    });
                });
            };
        /**
         * Load the translation file or use provided data for the given language.
         *
         * @param lang Language name
         * @param [data] Translation data to use
         * @returns Final translation data merged with existing translations
         * @memberof TranslateService
         */
        /**
         * Load the translation file or use provided data for the given language.
         *
         * \@memberof TranslateService
         * @param {?} lang Language name
         * @param {?=} data
         * @return {?} Final translation data merged with existing translations
         */
        TranslateService.prototype.use = /**
         * Load the translation file or use provided data for the given language.
         *
         * \@memberof TranslateService
         * @param {?} lang Language name
         * @param {?=} data
         * @return {?} Final translation data merged with existing translations
         */
            function (lang, data) {
                return __awaiter(this, void 0, void 0, function () {
                    var e_1, _a, translation, fileName, filePaths, filePaths_1, filePaths_1_1, path, filePath, e_1_1;
                    return __generator(this, function (_b) {
                        switch (_b.label) {
                            case 0:
                                if (lang && data) {
                                    return [2 /*return*/, this.setTranslation(lang, data)];
                                }
                                translation = this.data[lang];
                                if (this.isNotSupported(lang)) {
                                    translation = this.data[this.fallbackLang];
                                }
                                if (translation && Object.keys(translation).length > 0) {
                                    return [2 /*return*/, translation];
                                }
                                fileName = (lang || this.fallbackLang) + ".json";
                                filePaths = __spread([this.translationRoot], (this.translatePaths || []));
                                _b.label = 1;
                            case 1:
                                _b.trys.push([1, 6, 7, 8]);
                                filePaths_1 = __values(filePaths), filePaths_1_1 = filePaths_1.next();
                                _b.label = 2;
                            case 2:
                                if (!!filePaths_1_1.done)
                                    return [3 /*break*/, 5];
                                path = filePaths_1_1.value;
                                filePath = path + "/" + fileName;
                                return [4 /*yield*/, this.loadTranslation(lang, filePath)];
                            case 3:
                                _b.sent();
                                _b.label = 4;
                            case 4:
                                filePaths_1_1 = filePaths_1.next();
                                return [3 /*break*/, 2];
                            case 5: return [3 /*break*/, 8];
                            case 6:
                                e_1_1 = _b.sent();
                                e_1 = { error: e_1_1 };
                                return [3 /*break*/, 8];
                            case 7:
                                try {
                                    if (filePaths_1_1 && !filePaths_1_1.done && (_a = filePaths_1.return))
                                        _a.call(filePaths_1);
                                }
                                finally {
                                    if (e_1)
                                        throw e_1.error;
                                }
                                return [7 /*endfinally*/];
                            case 8: return [2 /*return*/, this.data[lang] || {}];
                        }
                    });
                });
            };
        /**
         * @param {?} lang
         * @param {?} path
         * @return {?}
         */
        TranslateService.prototype.loadTranslation = /**
         * @param {?} lang
         * @param {?} path
         * @return {?}
         */
            function (lang, path) {
                var _this = this;
                return new Promise(function (resolve) {
                    if (_this.disableCache) {
                        path += "?v=" + Date.now();
                    }
                    _this.http.get(path).subscribe(function (json) {
                        resolve(_this.setTranslation(lang, json));
                    }, function () {
                        resolve(_this.data[lang] || {});
                    });
                });
            };
        /**
         * @param {?} lang
         * @return {?}
         */
        TranslateService.prototype.isNotSupported = /**
         * @param {?} lang
         * @return {?}
         */
            function (lang) {
                return (lang !== this.fallbackLang &&
                    lang !== this.activeLang &&
                    (this.supportedLangs &&
                        this.supportedLangs.length > 0 &&
                        !this.supportedLangs.includes(lang)));
            };
        /**
         * @param {?} lang
         * @param {?} key
         * @return {?}
         */
        TranslateService.prototype.getValue = /**
         * @param {?} lang
         * @param {?} key
         * @return {?}
         */
            function (lang, key) {
                /** @type {?} */
                var data = this.data[lang];
                if (this.isNotSupported(lang)) {
                    data = this.data[this.fallbackLang];
                }
                if (!data) {
                    return key;
                }
                /** @type {?} */
                var keys = key.split('.');
                /** @type {?} */
                var propKey = '';
                do {
                    propKey += keys.shift();
                    /** @type {?} */
                    var value = data[propKey];
                    if (value !== undefined && (typeof value === 'object' || !keys.length)) {
                        data = value;
                        propKey = '';
                    }
                    else if (!keys.length) {
                        data = key;
                    }
                    else {
                        propKey += '.';
                    }
                } while (keys.length);
                return data;
            };
        /**
         * @param {?} lang
         * @param {?} data
         * @return {?}
         */
        TranslateService.prototype.setTranslation = /**
         * @param {?} lang
         * @param {?} data
         * @return {?}
         */
            function (lang, data) {
                /** @type {?} */
                var finalResult = this.data[lang] || {};
                finalResult = this.merge(finalResult, data || {});
                this.data[lang] = finalResult;
                return finalResult;
            };
        /**
         * @param {...?} translations
         * @return {?}
         */
        TranslateService.prototype.merge = /**
         * @param {...?} translations
         * @return {?}
         */
            function () {
                var _this = this;
                var translations = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    translations[_i] = arguments[_i];
                }
                /** @type {?} */
                var result = {};
                translations.forEach(function (translation) {
                    Object.keys(translation).forEach(function (key) {
                        if (key in result && Array.isArray(result[key])) {
                            result[key] = result[key].concat(translation[key]);
                        }
                        else if (key in result && typeof result[key] === 'object') {
                            result[key] = _this.merge(result[key], translation[key]);
                        }
                        else {
                            result[key] = translation[key];
                        }
                    });
                });
                return result;
            };
        /**
         * @param {?} str
         * @param {?} params
         * @return {?}
         */
        TranslateService.prototype.format = /**
         * @param {?} str
         * @param {?} params
         * @return {?}
         */
            function (str, params) {
                /** @type {?} */
                var result = str;
                if (params) {
                    Object.keys(params).forEach(function (key) {
                        /** @type {?} */
                        var value = params[key];
                        /** @type {?} */
                        var template = new RegExp('{' + key + '}', 'gm');
                        result = result.replace(template, value);
                    });
                }
                if (this.debugMode) {
                    result = "[" + this.activeLang + "] " + result;
                }
                return result;
            };
        TranslateService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        TranslateService.ctorParameters = function () {
            return [
                { type: i1.HttpClient },
                { type: undefined, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: [TRANSLATE_SETTINGS,] }] }
            ];
        };
        /** @nocollapse */ TranslateService.ngInjectableDef = i0.defineInjectable({ factory: function TranslateService_Factory() { return new TranslateService(i0.inject(i1.HttpClient), i0.inject(TRANSLATE_SETTINGS, 8)); }, token: TranslateService, providedIn: "root" });
        return TranslateService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var TitleService = /** @class */ (function () {
        function TitleService(title, translate) {
            var _this = this;
            this.title = title;
            this.translate = translate;
            this._titleKey = '';
            this.changed = new rxjs.Subject();
            translate.activeLangChanged.subscribe(function () { return _this.onLanguageChanged(); });
        }
        /**
         * @return {?}
         */
        TitleService.prototype.getTitle = /**
         * @return {?}
         */
            function () {
                return this._titleKey;
            };
        /**
         * @param {?} key
         * @return {?}
         */
        TitleService.prototype.setTitle = /**
         * @param {?} key
         * @return {?}
         */
            function (key) {
                /** @type {?} */
                var previousValue = this._titleKey;
                /** @type {?} */
                var newValue = key || '';
                /** @type {?} */
                var changed = newValue !== previousValue;
                if (changed) {
                    this._titleKey = newValue;
                    /** @type {?} */
                    var translated = this.translate.get(newValue);
                    this.title.setTitle(translated);
                    this.changed.next({
                        previousValue: previousValue,
                        currentValue: newValue
                    });
                }
            };
        /**
         * @return {?}
         */
        TitleService.prototype.onLanguageChanged = /**
         * @return {?}
         */
            function () {
                if (this._titleKey) {
                    /** @type {?} */
                    var translated = this.translate.get(this._titleKey);
                    this.title.setTitle(translated);
                }
            };
        TitleService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        TitleService.ctorParameters = function () {
            return [
                { type: i1$1.Title },
                { type: TranslateService }
            ];
        };
        /** @nocollapse */ TitleService.ngInjectableDef = i0.defineInjectable({ factory: function TitleService_Factory() { return new TitleService(i0.inject(i1$1.Title), i0.inject(TranslateService)); }, token: TitleService, providedIn: "root" });
        return TitleService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var TranslatePipe = /** @class */ (function () {
        function TranslatePipe(translate) {
            this.translate = translate;
        }
        /**
         * @param {?} key
         * @param {?=} params
         * @return {?}
         */
        TranslatePipe.prototype.transform = /**
         * @param {?} key
         * @param {?=} params
         * @return {?}
         */
            function (key, params) {
                return this.translate.get(key, params);
            };
        TranslatePipe.decorators = [
            { type: i0.Pipe, args: [{
                        name: 'translate',
                        pure: false
                    },] }
        ];
        /** @nocollapse */
        TranslatePipe.ctorParameters = function () {
            return [
                { type: TranslateService }
            ];
        };
        return TranslatePipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var TranslateModule = /** @class */ (function () {
        function TranslateModule() {
        }
        /**
         * @param {?=} settings
         * @return {?}
         */
        TranslateModule.forRoot = /**
         * @param {?=} settings
         * @return {?}
         */
            function (settings) {
                return {
                    ngModule: TranslateModule,
                    providers: [
                        { provide: TRANSLATE_SETTINGS, useValue: settings },
                        TranslateService,
                        TitleService
                    ]
                };
            };
        /**
         * @return {?}
         */
        TranslateModule.forChild = /**
         * @return {?}
         */
            function () {
                return {
                    ngModule: TranslateModule
                };
            };
        TranslateModule.decorators = [
            { type: i0.NgModule, args: [{
                        imports: [common.CommonModule, i1.HttpClientModule],
                        declarations: [TranslatePipe],
                        exports: [TranslatePipe]
                    },] }
        ];
        return TranslateModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    exports.TRANSLATE_SETTINGS = TRANSLATE_SETTINGS;
    exports.TranslateService = TranslateService;
    exports.TitleService = TitleService;
    exports.TranslatePipe = TranslatePipe;
    exports.TranslateModule = TranslateModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,