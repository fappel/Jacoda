/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as ace from 'brace';
import { Directive, Optional, Inject, Input, Output, EventEmitter, NgZone, ElementRef, KeyValueDiffers } from '@angular/core';
import { ACE_CONFIG, AceConfig, AceEditorEvents, AceSelectionEvents } from './ace.interfaces';
var AceDirective = /** @class */ (function () {
    function AceDirective(zone, elementRef, differs, defaults) {
        this.zone = zone;
        this.elementRef = elementRef;
        this.differs = differs;
        this.defaults = defaults;
        this.instance = null;
        this.configDiff = null;
        this.disabled = false;
        this.blur = new EventEmitter();
        this.focus = new EventEmitter();
        this.copy = new EventEmitter();
        this.paste = new EventEmitter();
        this.change = new EventEmitter();
        this.changeCursor = new EventEmitter();
        this.changeSession = new EventEmitter();
        this.changeSelection = new EventEmitter();
    }
    /**
     * @return {?}
     */
    AceDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var params = new AceConfig(this.defaults);
        params.assign(this.config); // Custom configuration
        if (this.disabled) {
            params.readOnly = true;
            params.highlightActiveLine = false;
        }
        params.mode = 'ace/mode/' + (params.mode || 'text');
        params.theme = 'ace/theme/' + (params.theme || 'github');
        this.zone.runOutsideAngular(function () {
            _this.instance = ace.edit(_this.elementRef.nativeElement);
            _this.instance.$blockScrolling = Infinity;
            _this.instance.setOptions(params);
        });
        // Add native Ace event handling
        AceEditorEvents.forEach(function (eventName) {
            if (_this.instance) {
                _this.instance.on(eventName, function () {
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        args[_i] = arguments[_i];
                    }
                    if (args.length === 1) {
                        args = args[0];
                    }
                    if (_this[eventName]) {
                        _this.zone.run(function () {
                            if (_this[eventName].observers.length) {
                                _this[eventName].emit(args);
                            }
                        });
                    }
                });
            }
        });
        // Add native Ace selection event handling
        AceSelectionEvents.forEach(function (eventName) {
            if (_this.instance) {
                _this.instance.selection.on(eventName, function () {
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        args[_i] = arguments[_i];
                    }
                    if (args.length === 1) {
                        args = args[0];
                    }
                    if (_this[eventName]) {
                        if (_this[eventName].observers.length) {
                            _this[eventName].emit(args);
                        }
                    }
                });
            }
        });
        if (!this.configDiff) {
            this.configDiff = this.differs.find(this.config || {}).create();
            this.configDiff.diff(this.config || {});
        }
    };
    /**
     * @return {?}
     */
    AceDirective.prototype.ngDoCheck = /**
     * @return {?}
     */
    function () {
        if (this.configDiff) {
            /** @type {?} */
            var changes = this.configDiff.diff(this.config || {});
            if (changes) {
                this.ngOnDestroy();
                this.ngOnInit();
            }
        }
    };
    /**
     * @return {?}
     */
    AceDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.instance) {
            if ((/** @type {?} */ ((/** @type {?} */ (this.instance.isFocused()))))) {
                this.blur.emit();
            }
            delete this.instance;
            this.instance = null;
        }
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    AceDirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        var _this = this;
        if (changes['disabled']) {
            if (changes['disabled'].currentValue !== changes['disabled'].previousValue) {
                this.zone.runOutsideAngular(function () {
                    if (_this.instance) {
                        /** @type {?} */
                        var params = new AceConfig(_this.defaults);
                        params.assign(_this.config); // Custom configuration
                        _this.instance.clearSelection();
                        /** @type {?} */
                        var hlActive = (params.highlightActiveLine == null) ? true : false;
                        _this.instance.setHighlightActiveLine(_this.disabled ? false : hlActive);
                        _this.instance.setReadOnly(_this.disabled ? true : (params.readOnly || false));
                    }
                });
            }
        }
    };
    /**
     * @return {?}
     */
    AceDirective.prototype.ace = /**
     * @return {?}
     */
    function () {
        return this.instance;
    };
    /**
     * @return {?}
     */
    AceDirective.prototype.clear = /**
     * @return {?}
     */
    function () {
        if (this.instance) {
            this.instance.setValue('');
            this.instance.clearSelection();
        }
    };
    /**
     * @return {?}
     */
    AceDirective.prototype.getValue = /**
     * @return {?}
     */
    function () {
        if (this.instance) {
            return this.instance.getValue();
        }
    };
    /**
     * @param {?} value
     * @param {?=} cursorPos
     * @return {?}
     */
    AceDirective.prototype.setValue = /**
     * @param {?} value
     * @param {?=} cursorPos
     * @return {?}
     */
    function (value, cursorPos) {
        if (this.instance) {
            this.instance.setValue(value || '', cursorPos);
        }
    };
    AceDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[ace]',
                    exportAs: 'ngxAce'
                },] }
    ];
    /** @nocollapse */
    AceDirective.ctorParameters = function () { return [
        { type: NgZone },
        { type: ElementRef },
        { type: KeyValueDiffers },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [ACE_CONFIG,] }] }
    ]; };
    AceDirective.propDecorators = {
        disabled: [{ type: Input }],
        config: [{ type: Input, args: ['ace',] }],
        blur: [{ type: Output }],
        focus: [{ type: Output }],
        copy: [{ type: Output }],
        paste: [{ type: Output }],
        change: [{ type: Output }],
        changeCursor: [{ type: Output }],
        changeSession: [{ type: Output }],
        changeSelection: [{ type: Output }]
    };
    return AceDirective;
}());
export { AceDirective };
if (false) {
    /**
     * @type {?}
     * @private
     */
    AceDirective.prototype.instance;
    /**
     * @type {?}
     * @private
     */
    AceDirective.prototype.configDiff;
    /** @type {?} */
    AceDirective.prototype.disabled;
    /** @type {?} */
    AceDirective.prototype.config;
    /** @type {?} */
    AceDirective.prototype.blur;
    /** @type {?} */
    AceDirective.prototype.focus;
    /** @type {?} */
    AceDirective.prototype.copy;
    /** @type {?} */
    AceDirective.prototype.paste;
    /** @type {?} */
    AceDirective.prototype.change;
    /** @type {?} */
    AceDirective.prototype.changeCursor;
    /** @type {?} */
    AceDirective.prototype.changeSession;
    /** @type {?} */
    AceDirective.prototype.changeSelection;
    /**
     * @type {?}
     * @private
     */
    AceDirective.prototype.zone;
    /**
     * @type {?}
     * @private
     */
    AceDirective.prototype.elementRef;
    /**
     * @type {?}
     * @private
     */
    AceDirective.prototype.differs;
    /**
     * @type {?}
     * @private
     */
    AceDirective.prototype.defaults;
}
//# sourceMappingURL=ace.directive.js.map