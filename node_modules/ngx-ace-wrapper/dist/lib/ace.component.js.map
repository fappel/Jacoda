{"version":3,"file":"ace.component.js","sourceRoot":"","sources":["../../src/lib/ace.component.ts"],"names":[],"mappings":"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","sourcesContent":["import 'brace';\n\nimport 'brace/mode/text';\nimport 'brace/theme/github';\n\nimport { Component,\n  AfterViewInit, Input, Output, EventEmitter,\n  ViewChild, HostBinding, ViewEncapsulation } from '@angular/core';\n\nimport { AceDirective } from './ace.directive';\n\nimport { AceConfigInterface } from './ace.interfaces';\n\n@Component({\n  selector: 'ace',\n  exportAs: 'ngxAce',\n  templateUrl: '../../dist/lib/ace.component.html',\n  styleUrls: [ '../../dist/lib/ace.component.css' ],\n  encapsulation: ViewEncapsulation.None\n})\nexport class AceComponent implements AfterViewInit {\n  private content: string = '';\n\n  @Input()\n  get value(): string {\n    return this.content;\n  }\n  set value(value: string) {\n    this.setContent(value);\n  }\n\n  @Input() disabled: boolean = false;\n\n  @Input() mode: string = '';\n  @Input() theme: string = '';\n\n  @Input() config?: AceConfigInterface;\n\n  @HostBinding('class.ace')\n  @Input() useAceClass: boolean = true;\n\n  @Output() blur = new EventEmitter<any>();\n  @Output() focus = new EventEmitter<any>();\n\n  @Output() copy = new EventEmitter<any>();\n  @Output() paste = new EventEmitter<any>();\n\n  @Output() change = new EventEmitter<any>();\n\n  @Output() valueChange = new EventEmitter<string>();\n\n  @Output() changeCursor = new EventEmitter<any>();\n  @Output() changeSession = new EventEmitter<any>();\n  @Output() changeSelection = new EventEmitter<any>();\n\n  @ViewChild(AceDirective) directiveRef?: AceDirective;\n\n  constructor() {}\n\n  ngAfterViewInit(): void {\n    if (this.content != null) {\n      this.setContent(this.content, true);\n    }\n  }\n\n  private setContent(value: string, force?: boolean): void {\n    if (force || value !== this.content) {\n      if (this.directiveRef) {\n        this.directiveRef.setValue(value, 1);\n      }\n\n      this.content = value;\n    }\n  }\n\n  public getConfig(): AceConfigInterface {\n    this.config = this.config ||Â {};\n\n    this.config.mode = this.mode || this.config.mode;\n\n    this.config.theme = this.theme || this.config.theme;\n\n    return this.config;\n  }\n\n  public onContentChange(event: any): void {\n    if (this.directiveRef) {\n      this.change.emit(event);\n\n      this.content = this.directiveRef.getValue() || '';\n\n      this.valueChange.emit(this.value);\n    }\n  }\n}\n"]}