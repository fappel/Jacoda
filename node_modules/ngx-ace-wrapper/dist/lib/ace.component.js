/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import 'brace';
import 'brace/mode/text';
import 'brace/theme/github';
import { Component, Input, Output, EventEmitter, ViewChild, HostBinding, ViewEncapsulation } from '@angular/core';
import { AceDirective } from './ace.directive';
var AceComponent = /** @class */ (function () {
    function AceComponent() {
        this.content = '';
        this.disabled = false;
        this.mode = '';
        this.theme = '';
        this.useAceClass = true;
        this.blur = new EventEmitter();
        this.focus = new EventEmitter();
        this.copy = new EventEmitter();
        this.paste = new EventEmitter();
        this.change = new EventEmitter();
        this.valueChange = new EventEmitter();
        this.changeCursor = new EventEmitter();
        this.changeSession = new EventEmitter();
        this.changeSelection = new EventEmitter();
    }
    Object.defineProperty(AceComponent.prototype, "value", {
        get: /**
         * @return {?}
         */
        function () {
            return this.content;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.setContent(value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    AceComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        if (this.content != null) {
            this.setContent(this.content, true);
        }
    };
    /**
     * @private
     * @param {?} value
     * @param {?=} force
     * @return {?}
     */
    AceComponent.prototype.setContent = /**
     * @private
     * @param {?} value
     * @param {?=} force
     * @return {?}
     */
    function (value, force) {
        if (force || value !== this.content) {
            if (this.directiveRef) {
                this.directiveRef.setValue(value, 1);
            }
            this.content = value;
        }
    };
    /**
     * @return {?}
     */
    AceComponent.prototype.getConfig = /**
     * @return {?}
     */
    function () {
        this.config = this.config || {};
        this.config.mode = this.mode || this.config.mode;
        this.config.theme = this.theme || this.config.theme;
        return this.config;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    AceComponent.prototype.onContentChange = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.directiveRef) {
            this.change.emit(event);
            this.content = this.directiveRef.getValue() || '';
            this.valueChange.emit(this.value);
        }
    };
    AceComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ace',
                    exportAs: 'ngxAce',
                    template: "<div [ace]=\"getConfig()\" [disabled]=\"disabled\" (blur)=\"blur.emit($event)\" (focus)=\"focus.emit($event)\" (copy)=\"copy.emit($event)\" (paste)=\"paste.emit($event)\" (change)=\"onContentChange($event)\" (changeCursor)=\"changeCursor.emit($event)\" (changeSession)=\"changeSession.emit($event)\" (changeSelection)=\"changeSelection.emit($event)\">\n</div>\n",
                    encapsulation: ViewEncapsulation.None,
                    styles: [".ace,\n.ace > .ace_editor {\n  display: block;\n  width: 100%;\n  height: 100%;\n}\n\n.ace[fxflex] {\n  display: flex;\n  flex-direction: inherit;\n  align-items: inherit;\n  min-width: 0;\n  min-height: 0;\n\n  -webkit-box-direction: inherit;\n  -webkit-box-orient: inherit;\n}\n\n.ace[fxflex] > .ace_editor {\n  flex: 1 1 auto;\n  min-width: 0;\n  min-height: 0;\n\n  -webkit-box-flex: 1;\n}\n"]
                }] }
    ];
    /** @nocollapse */
    AceComponent.ctorParameters = function () { return []; };
    AceComponent.propDecorators = {
        value: [{ type: Input }],
        disabled: [{ type: Input }],
        mode: [{ type: Input }],
        theme: [{ type: Input }],
        config: [{ type: Input }],
        useAceClass: [{ type: HostBinding, args: ['class.ace',] }, { type: Input }],
        blur: [{ type: Output }],
        focus: [{ type: Output }],
        copy: [{ type: Output }],
        paste: [{ type: Output }],
        change: [{ type: Output }],
        valueChange: [{ type: Output }],
        changeCursor: [{ type: Output }],
        changeSession: [{ type: Output }],
        changeSelection: [{ type: Output }],
        directiveRef: [{ type: ViewChild, args: [AceDirective,] }]
    };
    return AceComponent;
}());
export { AceComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    AceComponent.prototype.content;
    /** @type {?} */
    AceComponent.prototype.disabled;
    /** @type {?} */
    AceComponent.prototype.mode;
    /** @type {?} */
    AceComponent.prototype.theme;
    /** @type {?} */
    AceComponent.prototype.config;
    /** @type {?} */
    AceComponent.prototype.useAceClass;
    /** @type {?} */
    AceComponent.prototype.blur;
    /** @type {?} */
    AceComponent.prototype.focus;
    /** @type {?} */
    AceComponent.prototype.copy;
    /** @type {?} */
    AceComponent.prototype.paste;
    /** @type {?} */
    AceComponent.prototype.change;
    /** @type {?} */
    AceComponent.prototype.valueChange;
    /** @type {?} */
    AceComponent.prototype.changeCursor;
    /** @type {?} */
    AceComponent.prototype.changeSession;
    /** @type {?} */
    AceComponent.prototype.changeSelection;
    /** @type {?} */
    AceComponent.prototype.directiveRef;
}
//# sourceMappingURL=ace.component.js.map