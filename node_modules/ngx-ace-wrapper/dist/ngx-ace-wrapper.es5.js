import { InjectionToken, Directive, Optional, Inject, Input, Output, EventEmitter, NgZone, ElementRef, KeyValueDiffers, Component, ViewChild, HostBinding, ViewEncapsulation, NgModule } from '@angular/core';
import { edit } from 'brace';
import 'brace/mode/text';
import 'brace/theme/github';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var ACE_CONFIG = new InjectionToken('ACE_CONFIG');
/** @type {?} */
var AceEditorEvents = [
    'blur',
    'focus',
    'copy',
    'paste',
    'change',
    'changeSession'
];
/** @type {?} */
var AceSelectionEvents = [
    'changeCursor',
    'changeSelection'
];
var AceConfig = /** @class */ (function () {
    function AceConfig(config) {
        if (config === void 0) { config = {}; }
        this.assign(config);
    }
    /**
     * @param {?=} config
     * @param {?=} target
     * @return {?}
     */
    AceConfig.prototype.assign = /**
     * @param {?=} config
     * @param {?=} target
     * @return {?}
     */
    function (config, target) {
        if (config === void 0) { config = {}; }
        target = target || this;
        for (var key in config) {
            if (config[key] && !Array.isArray(config[key]) && typeof config[key] === 'object') {
                target[key] = {};
                this.assign(config[key], target[key]);
            }
            else {
                target[key] = config[key];
            }
        }
    };
    return AceConfig;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var AceDirective = /** @class */ (function () {
    function AceDirective(zone, elementRef, differs, defaults) {
        this.zone = zone;
        this.elementRef = elementRef;
        this.differs = differs;
        this.defaults = defaults;
        this.instance = null;
        this.configDiff = null;
        this.disabled = false;
        this.blur = new EventEmitter();
        this.focus = new EventEmitter();
        this.copy = new EventEmitter();
        this.paste = new EventEmitter();
        this.change = new EventEmitter();
        this.changeCursor = new EventEmitter();
        this.changeSession = new EventEmitter();
        this.changeSelection = new EventEmitter();
    }
    /**
     * @return {?}
     */
    AceDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var params = new AceConfig(this.defaults);
        params.assign(this.config); // Custom configuration
        if (this.disabled) {
            params.readOnly = true;
            params.highlightActiveLine = false;
        }
        params.mode = 'ace/mode/' + (params.mode || 'text');
        params.theme = 'ace/theme/' + (params.theme || 'github');
        this.zone.runOutsideAngular(function () {
            _this.instance = edit(_this.elementRef.nativeElement);
            _this.instance.$blockScrolling = Infinity;
            _this.instance.setOptions(params);
        });
        // Add native Ace event handling
        AceEditorEvents.forEach(function (eventName) {
            if (_this.instance) {
                _this.instance.on(eventName, function () {
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        args[_i] = arguments[_i];
                    }
                    if (args.length === 1) {
                        args = args[0];
                    }
                    if (_this[eventName]) {
                        _this.zone.run(function () {
                            if (_this[eventName].observers.length) {
                                _this[eventName].emit(args);
                            }
                        });
                    }
                });
            }
        });
        // Add native Ace selection event handling
        AceSelectionEvents.forEach(function (eventName) {
            if (_this.instance) {
                _this.instance.selection.on(eventName, function () {
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        args[_i] = arguments[_i];
                    }
                    if (args.length === 1) {
                        args = args[0];
                    }
                    if (_this[eventName]) {
                        if (_this[eventName].observers.length) {
                            _this[eventName].emit(args);
                        }
                    }
                });
            }
        });
        if (!this.configDiff) {
            this.configDiff = this.differs.find(this.config || {}).create();
            this.configDiff.diff(this.config || {});
        }
    };
    /**
     * @return {?}
     */
    AceDirective.prototype.ngDoCheck = /**
     * @return {?}
     */
    function () {
        if (this.configDiff) {
            /** @type {?} */
            var changes = this.configDiff.diff(this.config || {});
            if (changes) {
                this.ngOnDestroy();
                this.ngOnInit();
            }
        }
    };
    /**
     * @return {?}
     */
    AceDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.instance) {
            if ((/** @type {?} */ ((/** @type {?} */ (this.instance.isFocused()))))) {
                this.blur.emit();
            }
            delete this.instance;
            this.instance = null;
        }
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    AceDirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        var _this = this;
        if (changes['disabled']) {
            if (changes['disabled'].currentValue !== changes['disabled'].previousValue) {
                this.zone.runOutsideAngular(function () {
                    if (_this.instance) {
                        /** @type {?} */
                        var params = new AceConfig(_this.defaults);
                        params.assign(_this.config); // Custom configuration
                        _this.instance.clearSelection();
                        /** @type {?} */
                        var hlActive = (params.highlightActiveLine == null) ? true : false;
                        _this.instance.setHighlightActiveLine(_this.disabled ? false : hlActive);
                        _this.instance.setReadOnly(_this.disabled ? true : (params.readOnly || false));
                    }
                });
            }
        }
    };
    /**
     * @return {?}
     */
    AceDirective.prototype.ace = /**
     * @return {?}
     */
    function () {
        return this.instance;
    };
    /**
     * @return {?}
     */
    AceDirective.prototype.clear = /**
     * @return {?}
     */
    function () {
        if (this.instance) {
            this.instance.setValue('');
            this.instance.clearSelection();
        }
    };
    /**
     * @return {?}
     */
    AceDirective.prototype.getValue = /**
     * @return {?}
     */
    function () {
        if (this.instance) {
            return this.instance.getValue();
        }
    };
    /**
     * @param {?} value
     * @param {?=} cursorPos
     * @return {?}
     */
    AceDirective.prototype.setValue = /**
     * @param {?} value
     * @param {?=} cursorPos
     * @return {?}
     */
    function (value, cursorPos) {
        if (this.instance) {
            this.instance.setValue(value || '', cursorPos);
        }
    };
    AceDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[ace]',
                    exportAs: 'ngxAce'
                },] }
    ];
    /** @nocollapse */
    AceDirective.ctorParameters = function () { return [
        { type: NgZone },
        { type: ElementRef },
        { type: KeyValueDiffers },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [ACE_CONFIG,] }] }
    ]; };
    AceDirective.propDecorators = {
        disabled: [{ type: Input }],
        config: [{ type: Input, args: ['ace',] }],
        blur: [{ type: Output }],
        focus: [{ type: Output }],
        copy: [{ type: Output }],
        paste: [{ type: Output }],
        change: [{ type: Output }],
        changeCursor: [{ type: Output }],
        changeSession: [{ type: Output }],
        changeSelection: [{ type: Output }]
    };
    return AceDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var AceComponent = /** @class */ (function () {
    function AceComponent() {
        this.content = '';
        this.disabled = false;
        this.mode = '';
        this.theme = '';
        this.useAceClass = true;
        this.blur = new EventEmitter();
        this.focus = new EventEmitter();
        this.copy = new EventEmitter();
        this.paste = new EventEmitter();
        this.change = new EventEmitter();
        this.valueChange = new EventEmitter();
        this.changeCursor = new EventEmitter();
        this.changeSession = new EventEmitter();
        this.changeSelection = new EventEmitter();
    }
    Object.defineProperty(AceComponent.prototype, "value", {
        get: /**
         * @return {?}
         */
        function () {
            return this.content;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.setContent(value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    AceComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        if (this.content != null) {
            this.setContent(this.content, true);
        }
    };
    /**
     * @private
     * @param {?} value
     * @param {?=} force
     * @return {?}
     */
    AceComponent.prototype.setContent = /**
     * @private
     * @param {?} value
     * @param {?=} force
     * @return {?}
     */
    function (value, force) {
        if (force || value !== this.content) {
            if (this.directiveRef) {
                this.directiveRef.setValue(value, 1);
            }
            this.content = value;
        }
    };
    /**
     * @return {?}
     */
    AceComponent.prototype.getConfig = /**
     * @return {?}
     */
    function () {
        this.config = this.config || {};
        this.config.mode = this.mode || this.config.mode;
        this.config.theme = this.theme || this.config.theme;
        return this.config;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    AceComponent.prototype.onContentChange = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.directiveRef) {
            this.change.emit(event);
            this.content = this.directiveRef.getValue() || '';
            this.valueChange.emit(this.value);
        }
    };
    AceComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ace',
                    exportAs: 'ngxAce',
                    template: "<div [ace]=\"getConfig()\" [disabled]=\"disabled\" (blur)=\"blur.emit($event)\" (focus)=\"focus.emit($event)\" (copy)=\"copy.emit($event)\" (paste)=\"paste.emit($event)\" (change)=\"onContentChange($event)\" (changeCursor)=\"changeCursor.emit($event)\" (changeSession)=\"changeSession.emit($event)\" (changeSelection)=\"changeSelection.emit($event)\">\n</div>\n",
                    encapsulation: ViewEncapsulation.None,
                    styles: [".ace,\n.ace > .ace_editor {\n  display: block;\n  width: 100%;\n  height: 100%;\n}\n\n.ace[fxflex] {\n  display: flex;\n  flex-direction: inherit;\n  align-items: inherit;\n  min-width: 0;\n  min-height: 0;\n\n  -webkit-box-direction: inherit;\n  -webkit-box-orient: inherit;\n}\n\n.ace[fxflex] > .ace_editor {\n  flex: 1 1 auto;\n  min-width: 0;\n  min-height: 0;\n\n  -webkit-box-flex: 1;\n}\n"]
                }] }
    ];
    /** @nocollapse */
    AceComponent.ctorParameters = function () { return []; };
    AceComponent.propDecorators = {
        value: [{ type: Input }],
        disabled: [{ type: Input }],
        mode: [{ type: Input }],
        theme: [{ type: Input }],
        config: [{ type: Input }],
        useAceClass: [{ type: HostBinding, args: ['class.ace',] }, { type: Input }],
        blur: [{ type: Output }],
        focus: [{ type: Output }],
        copy: [{ type: Output }],
        paste: [{ type: Output }],
        change: [{ type: Output }],
        valueChange: [{ type: Output }],
        changeCursor: [{ type: Output }],
        changeSession: [{ type: Output }],
        changeSelection: [{ type: Output }],
        directiveRef: [{ type: ViewChild, args: [AceDirective,] }]
    };
    return AceComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var AceModule = /** @class */ (function () {
    function AceModule() {
    }
    AceModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [AceComponent, AceDirective],
                    imports: [CommonModule],
                    exports: [CommonModule, AceComponent, AceDirective],
                    providers: []
                },] }
    ];
    return AceModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { AceComponent, AceDirective, ACE_CONFIG, AceConfig, AceModule };
//# sourceMappingURL=ngx-ace-wrapper.es5.js.map
